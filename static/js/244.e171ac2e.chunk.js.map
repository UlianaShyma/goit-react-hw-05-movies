{"version":3,"file":"static/js/244.e171ac2e.chunk.js","mappings":"6LAEaA,EAAS,WACpB,OACE,gBACEC,MAAO,CACLC,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,yBALf,UAQE,SAAC,KAAD,CAAcC,MAAO,IAAKC,MAAM,aAGrC,C,iLCbYC,EAAUC,EAAAA,GAAAA,IAAH,iSAaPC,EAAOD,EAAAA,GAAAA,GAAH,+HAQJE,EAAOF,EAAAA,GAAAA,GAAH,gNAcJG,EAAOH,EAAAA,GAAAA,EAAH,6G,SCmBjB,EAlDgB,WACd,OAA8BI,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,GAAKN,EAAL,CACAG,GAAa,GACb,IAAMI,EAAiB,mCAAG,gHAEIC,EAAAA,EAAAA,IAAgBC,OAAOT,IAF3B,gBAEdU,EAFc,EAEdA,QACRX,EAAWW,GAHW,gDAKtBL,EAAS,EAAD,IACRM,QAAQC,IAAI,KAAMC,SANI,yBAQtBV,GAAa,GARS,4EAAH,qDAWvBI,EAAkBP,EAbE,CAcrB,GAAE,CAACA,KAGF,iCACIE,GAAaJ,GAA8B,IAAnBA,EAAQgB,QAChC,uEAECZ,IACAE,GACDN,IACE,SAACN,EAAD,WACE,SAACE,EAAD,UACGI,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,UAACvB,EAAD,YACE,UAACC,EAAD,sBAAeoB,MACf,0BACE,mCADF,IACkBC,OAHTC,EADA,QAYpBhB,IAAa,SAAClB,EAAA,EAAD,MAGnB,C,6PCnDKmC,EAAU,gCACVC,EAAU,mCAKHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAClBH,GADkB,OAJH,qBAIG,oBACiBC,IAFT,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qDAOjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNH,EAAAA,EAAAA,IAAA,UAAaH,GAAb,OAVH,gBAU2C,CAC7DO,OAAQ,CACNC,QAASP,EACTK,MAAAA,EACAG,KAAM,EACNC,eAAe,KANU,uBACrBN,EADqB,EACrBA,KADqB,kBAStBA,GATsB,2CAAH,sDAYfO,EAAe,mCAAG,WAAM9B,GAAN,yFACNsB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA6BnB,GAAW,CAC7D0B,OAAQ,CACNC,QAASP,KAHgB,uBACrBG,EADqB,EACrBA,KADqB,kBAMtBA,GANsB,2CAAH,sDASfQ,EAAY,mCAAG,WAAM/B,GAAN,yFACHsB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA6BnB,EAA7B,YAAgD,CACrE0B,OAAQ,CACNC,QAASP,KAHa,uBAClBG,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZf,EAAe,mCAAG,WAAMR,GAAN,yFACNsB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA6BnB,EAA7B,YAAgD,CACrE0B,OAAQ,CACNC,QAASP,EACTQ,KAAM,KAJmB,uBACrBL,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUfS,EAAc,SAAAC,GACzB,IACMC,EAAaC,EACnB,OAAKF,EAGC,GAAN,OALkB,oCAKlB,OAAsBA,GAFbC,CAGV,EAEYE,EAAc,SAAAC,GAEzB,MADgB,0CAAsCA,EAEvD,C","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","utils/TMDB_API.jsx"],"sourcesContent":["import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <InfinitySpin width={350} color=\"#553c9a\" />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1200px;\n  max-height: 500px;\n\n  padding: 20px;\n  border-radius: 2px;\n  overflow-y: scroll;\n\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  overflow: overlay;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding-right: 10px;\n  justify-content: start;\n  gap: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n\n  border-top: 1px solid #553c9a;\n  width: 100%;\n\n  &:first-child {\n    border-top: 0;\n    margin-top: 0;\n  }\n`;\n\nexport const Name = styled.p`\n  margin-bottom: 7px;\n  margin-top: 7px;\n  font-size: 20px;\n  font-weight: bold;\n`;\n","import { getMovieReviews } from '../../utils/TMDB_API';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Loader } from '../Loader/Loader';\nimport { Wrapper, List, Item, Name } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState();\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    const fetchMovieReviews = async () => {\n      try {\n        const { results } = await getMovieReviews(Number(movieId));\n        setReviews(results);\n      } catch (error) {\n        setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {!isLoading && reviews && reviews.length === 0 ? (\n        <h2>We don't have any reviews for this movie.</h2>\n      ) : (\n        !isLoading &&\n        !error &&\n        reviews && (\n          <Wrapper>\n            <List>\n              {reviews.map(({ author, content, id }) => (\n                <Item key={id}>\n                  <Name>Author: {author}</Name>\n                  <p>\n                    <b>Review:</b> {content}\n                  </p>\n                </Item>\n              ))}\n            </List>\n          </Wrapper>\n        )\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nimport defaultPoster from '../images/no_poster_placeholder.png';\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '28dcdbd0943bf495601cda9c26c777d2';\n\nconst trendingMovie = 'trending/movie/day';\nconst searchByQuery = 'search/movie';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${baseURL}${trendingMovie}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(`${baseURL}${searchByQuery}`, {\n    params: {\n      api_key: API_KEY,\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(`${baseURL}movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(`${baseURL}movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`${baseURL}movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const posterMovie = poster_path => {\n  const posterUrl = 'https://image.tmdb.org/t/p/w300/';\n  const defaultImg = defaultPoster;\n  if (!poster_path) {\n    return defaultImg;\n  }\n  return `${posterUrl}${poster_path}`;\n};\n\nexport const profilePath = profile_path => {\n  const profileImg = `https://image.tmdb.org/t/p/w200/${profile_path}`;\n  return profileImg;\n};\n"],"names":["Loader","style","position","left","top","transform","width","color","Wrapper","styled","List","Item","Name","useState","reviews","setReviews","movieId","useParams","isLoading","setIsLoading","error","setError","useEffect","fetchMovieReviews","getMovieReviews","Number","results","console","log","message","length","map","author","content","id","baseURL","API_KEY","getTrendingMovies","axios","data","getMovieByQuery","query","params","api_key","page","include_adult","getMovieDetails","getMovieCast","posterMovie","poster_path","defaultImg","defaultPoster","profilePath","profile_path"],"sourceRoot":""}